<execute partitionSaveCount="1">
<!-- where 条件中将 这个条件去掉 COALESCE(length(i.parent_id),0)<1 
   <task name="drop_instance_collapse">
     <![CDATA[
      drop table order_instance_collapse
     ]]>
   </task>

    <task name="create_instance_collapse">
    
  
 <![CDATA[
    CREATE table `order_instance_collapse` 
     ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' LINES TERMINATED BY '\n' STORED AS TEXTFILE 
    AS 
    SELECT i.order_id, COALESCE(i.instance_id,0) as instance_id  ,COALESCE(i.menu_id,0) as menu_id,sum(i.num) as num
           ,round(sum(i.fee),2) as fee,round(sum(i.ratio_fee),2) as ratio_fee
          ,COALESCE(i.unit,'') as unit,sum(i.account_num) as account_num,i.account_unit
          ,i.name,COALESCE(i.kindmenu_id,0) as kindmenu_id
    FROM instance i 
    WHERE i.status = 2  AND i.pt='${context.date}' AND i.is_valid= 1 
    GROUP BY i.order_id,i.instance_id,i.menu_id,i.unit,i.account_unit,i.name,i.kindmenu_id
 ]]> 
    </task>
     -->
    <!-- 
    <task name="drop_valid_order">
     <![CDATA[
      drop table valid_order
     ]]>
    </task>

    <task name="create_valid_order">
        CREATE table `valid_order`
        ROW FORMAT DELIMITED FIELDS
        TERMINATED BY '\t' LINES TERMINATED BY '\n'
        STORED AS TEXTFILE
        AS
        SELECT
          order_id,count(1) as instance_id,sum(num) as instance_num
        FROM order_instance_collapse 
        GROUP BY order_id
    </task>
 -->
 <task name="drop_create_instance">
     DROP TABLE IF EXISTS `order_customers`
 </task>
 
    <task name="create_instance">
     <![CDATA[
   CREATE TABLE IF NOT EXISTS `order_customers`
     ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' LINES TERMINATED BY '\n' STORED AS TEXTFILE
   AS
   SELECT a1.order_id, a1.customer_ids, COALESCE(a2.has_fetch, 0) has_fetch
   FROM
     (SELECT i.order_id, concat_ws(',',collect_set( split(i.batch_msg,'[\\w\\W]*\\|')[1])) as customer_ids
     FROM instance AS i
     WHERE ( i.pt='${context.date}' AND i.is_valid= 1 )
     GROUP BY order_id
     ) a1
   LEFT JOIN
     (SELECT order_id, CASE WHEN SUM(i.draw_status & 8) > 0 THEN 1 ELSE 0 END as has_fetch
      FROM instance AS i
     WHERE  ( i.pt='${context.date}' AND i.is_valid= 1 AND status =2)
     GROUP BY order_id
     ) a2
   ON a1.order_id = a2.order_id
   ]]>
    </task> 
 
   <task name="drop_order_instance">
     <![CDATA[
      drop table order_instance
     ]]>
    </task>
  <!--  
   
    remove from order_instance
    ,round( SUM(i.fee),2) as all_fee
           ,CASE WHEN vo.instance_id > 150 THEN null 
             ELSE concat_ws('\;',collect_list(concat_ws('_',COALESCE(i.instance_id,0), COALESCE(i.name, ''), COALESCE(i.kindmenu_id,0), 
                                                      cast( i.num as STRING) 
                                                     ,cast( i.fee as STRING) 
                                                     ,cast( i.ratio_fee as STRING)
                                                     ,COALESCE(i.unit,'')
                                                     ,cast(i.account_num as STRING)
                                                     ,COALESCE(i.account_unit,'')))) END as all_menu
                                                     
      LEFT JOIN order_instance_collapse i on (o.order_id = i.order_id)
       LEFT JOIN valid_order vo ON (o.order_id=vo.order_id )
       ,cast(vo.instance_num as bigint) AS instance_count
       GROUP By o.totalpay_id,o.people_count,o.order_id ,o.area_id,o.seat_id,o.is_valid , o.order_from 
     , o.order_kind,o.open_time,o.end_time,o.order_status,vo.instance_id,vo.instance_num,o.inner_code,o.code,o.seat_code
     -->
   
    <task name="drop_card_expense">
     <![CDATA[
      drop table card_expense_relative
     ]]>
    </task>
   
    <!-- 企业卡相关 报销状态-->
    <task name="create_card_expense">
    CREATE TEMPORARY TABLE `card_expense_relative`
     ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' LINES TERMINATED BY '\n' STORED AS TEXTFILE 
     AS 
     SELECT a.totalpay_id , b.expense_status,a.create_time
      FROM ent_expense_order a 
           INNER JOIN ent_expense b 
              ON (a.expense_id = b.expense_id AND b.is_valid=1 AND a.is_valid=1 AND a.pt='${context.date}' AND b.pt='${context.date}')
    </task>
     

    <!-- AND o.status=4 -->
    <task name="create_order">
 <![CDATA[
    CREATE table `order_instance`
     ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' LINES TERMINATED BY '\n' STORED AS TEXTFILE 
    AS 
    SELECT  o.totalpay_id ,o.people_count, o.order_id, o.area_id ,o.seat_id ,o.mobile,o.address
           ,o.is_valid AS is_valido , o.order_from , o.order_kind,o.open_time,o.end_time,o.order_status
           ,o.inner_code ,o.code ,o.seat_code, obill.final_amount AS bill_info_final_amount 
           ,ctm.customer_ids,ctm.has_fetch,o.customerregister_id , toe.courier_phone
     FROM  orderinfo o
           LEFT JOIN orderbill AS obill on(o.order_id = obill.order_id AND obill.is_valid=1 AND obill.pt='${context.date}')
           LEFT JOIN order_customers AS ctm ON (o.order_id = ctm.order_id)
           LEFT JOIN takeout_order_extra AS toe 
             ON (o.order_id = toe.order_id AND toe.pt='${context.date}' AND toe.courier_phone IS NOT NULL)
    WHERE o.pt='${context.date}'  AND o.is_valid=1
 ]]>
    </task>

    <task name="drop_tmp_pay">
     <![CDATA[
      drop table tmp_pay
     ]]>
    </task>

    <task name="create_tmp_pay">
    
 <![CDATA[
 CREATE  table tmp_pay 
 ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' LINES TERMINATED BY '\n' STORED AS TEXTFILE
   AS
SELECT aa.totalpay_id, concat_ws('\;', collect_list(aa.kindpay)) as kindpay,sum(aa.fee) as fee
  ,CASE WHEN sum(is_enterprise_card_pay) >0 THEN 1 ELSE 0 END AS is_enterprise_card_pay
  FROM (
  SELECT 
     totalpay_id  
     , SUM(pay.fee) AS fee  
     , concat_ws( '_', COALESCE( kindpay_id,'0')
     , cast(count(1) AS STRING) 
     , cast(round(sum(fee),2) AS STRING)
     , cast(
        SUM(
          (COALESCE(pay.coupon_fee,0) - COALESCE(pay.coupon_cost,0)) * COALESCE(pay.coupon_num, 0)
        ) AS STRING)
     , COALESCE( cast(min(pay_id) AS STRING),'0')
     ) AS kindpay
     , SUM( CASE WHEN pay.type = 103 THEN 1 ELSE 0 END ) AS is_enterprise_card_pay
  FROM pay 
  WHERE pt='${context.date}' AND length(kindpay_id)> 0 AND is_valid=1
  GROUP BY totalpay_id ,kindpay_id ) as aa
  GROUP BY aa.totalpay_id
  ]]>
    </task>
    <task name="drop_group_specialfee">
     <![CDATA[
      drop table tmp_group_specialfee
     ]]>
    </task>
    <task name="create_group_specialfee">
 <![CDATA[
CREATE  table tmp_group_specialfee
 ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' LINES TERMINATED BY '\n' STORED AS TEXTFILE
   AS
SELECT sf.totalpay_id
       ,concat_ws( '\;',collect_list(concat_ws( '_',cast(sf.kind AS STRING ) , cast(sf.fee AS STRING )  ))) AS special_fee_summary
  FROM specialfee sf
 WHERE sf.is_valid = 1 AND sf.pt='${context.date}'
 GROUP BY sf.totalpay_id
  ]]>
    </task>
    <!-- <task name="drop_totalpay_summary_partition"> <![CDATA[ alter table 
        totalpay_summary drop partition(pt='${context.date}') ]]> </task> -->

<task name="drop_customer_card">
     <![CDATA[
      drop table tmp_customer_card
     ]]>
</task>

<task name="customer_card">
     <![CDATA[
CREATE  table tmp_customer_card
 ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' LINES TERMINATED BY '\n' STORED AS TEXTFILE
   AS
  SELECT cd.entity_id,cd.id,cd.code,cd.inner_code,cd.customer_id,c.name,c.spell,c.mobile,c.phone
   , CASE WHEN (cd.id regexp '^E_') THEN 1 ELSE 0 END AS is_enterprise_card
  FROM card cd INNER JOIN customer c 
       ON (cd.customer_id = c.id AND cd.entity_id=c.entity_id 
           AND cd.pt='${context.date}' AND c.pt='${context.date}') 
  ]]>
</task>

    <!--20170815 添加是否是企业卡支相关is_enterprise_card:0/1 -->
    <joinTask name="import_totalpay_summary">
     <![CDATA[
    INSERT OVERWRITE TABLE totalpay_summary PARTITION (pt,pmod)
  SELECT tp.totalpay_id,tp.curr_date,tp.outfee,tp.source_amount,tp.discount_amount,tp.coupon_discount
         ,tp.result_amount,tp.recieve_amount,tp.ratio,tp.status,tp.entity_id
         ,tp.is_valid,tp.op_time,tp.last_ver,tp.op_user_id,tp.discount_plan_id
         ,tp.operator,tp.operate_date,tp.card_id,tp.card,tp.card_entity_id
         ,tp.is_full_ratio,tp.is_minconsume_ratio,tp.is_servicefee_ratio,tp.invoice_code
         ,tp.invoice_memo,tp.invoice,tp.over_status,tp.is_hide,tp.load_time,tp.modify_time
         ,o.order_id,o.seat_id,o.area_id,o.is_valido ,o.people_count 
         ,o.order_from 
         ,o.order_kind
         ,o.inner_code
         ,o.open_time
         ,o.end_time
         ,o.order_status
         ,o.code , o.seat_code , o.customer_ids, o.has_fetch,o.customerregister_id
         ,o.mobile AS order_mobile
         ,o.address AS order_address
         ,o.courier_phone
         ,p.kindpay,p.fee as all_pay_fee
         ,sp.special_fee_summary
         ,cc.code as card_code,cc.inner_code as card_inner_code,cc.customer_id as card_customer_id
         ,cc.name as card_customer_name,cc.spell AS card_customer_spell
         ,cc.mobile AS card_customer_moble,cc.phone AS card_customer_phone,
         o.bill_info_final_amount
         ,sbill.final_amount AS service_bill_final_amount
         , cd_exp.expense_status
		 , cd_exp.create_time as expense_create_time
         , CASE WHEN (cc.is_enterprise_card > 0) OR (p.is_enterprise_card_pay >0) THEN 1 ELSE 0 END AS is_enterprise_card
         , tp.pt,tp.pmod
    FROM totalpay tp INNER JOIN order_instance o ON (tp.totalpay_id = o.totalpay_id)
                     LEFT JOIN tmp_pay p ON (tp.totalpay_id = p.totalpay_id)
                     LEFT JOIN tmp_group_specialfee sp ON( tp.totalpay_id = sp.totalpay_id )
                     LEFT JOIN tmp_customer_card AS cc on(tp.card_id = cc.id AND tp.entity_id= cc.entity_id)
                     LEFT JOIN servicebill AS sbill on(tp.totalpay_id = sbill.servicebill_id AND sbill.is_valid=1 AND sbill.pt='${context.date}')
                     LEFT JOIN card_expense_relative AS cd_exp ON ( tp.totalpay_id = cd_exp.totalpay_id)
   WHERE tp.pt='${context.date}' and  cast(tp.curr_date as bigint) > ${context.datediff(-100)}
   ]]>
   <!-- AND tp.status=2 AND tp.is_valid=1 -->
    </joinTask>

 

</execute>